# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

let
  home-manager = builtins.fetchGit {
    url = "https://github.com/rycee/home-manager.git";
    rev = "dd94a849df69fe62fe2cb23a74c2b9330f1189ed"; # CHANGEME 
    ref = "release-18.09";
  }; 
  dot = "/home/jin/nixos-config/.dotfiles";
in {
  imports =
    [ # Include the results of the hardware scan.
      /etc/nixos/hardware-configuration.nix
      (import "${home-manager}/nixos")
    ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.enp8s0.useDHCP = true;
  networking.interfaces.wlp9s0.useDHCP = true;
  networking.hostName = "guu-nixos"; # Define your hostname.
  #networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };

  # Set your time zone.
  time.timeZone = "America/Chicago";

  users.defaultUserShell = pkgs.zsh;
  programs.zsh = {
    enable = true;
    enableCompletion = true;
    autosuggestions.enable = true;
    syntaxHighlighting.enable = true;
    interactiveShellInit=''
      [ -z "$HISTFILE" ] && HISTFILE="$HOME/.config/zsh/.zsh_hist"
      HISTFILESIZE=50000
      HISTSIZE=50000
      SAVEHIST=50000
    '';
  };

  # List packages installed in system profile. To search, run:
  environment.systemPackages = with pkgs; [
    gcc binutils nix
    wget vim neovim sudo manpages gitAndTools.gitFull
    trayer dmenu picom nitrogen
    haskellPackages.xmobar
    qutebrowser alacritty htop ranger unzip

    irssi xcape zathura ghostscript 
    emacs mupdf tree fzf less ledger 
    maim ripgrep rsync imagemagick
    gnupg youtube-dl sxiv xclip xsel hack-font curl ffmpeg tree

    #unrar ## -- taken away as it's not free
    unzip xz zip firefox
    vlc mpv 
  ];

  # Despite looking like normal packages, simply adding these font packages to
  # your environment.systemPackages won't make the fonts accessible to
  # applications. To achieve that, put these packages in the fonts.fonts NixOS
  # options list instead.
  # - source :: https://nixos.wiki/wiki/Fonts
  fonts = {
    enableDefaultFonts = true;
    fonts = with pkgs; [
      terminus_font ## This is the font I like, use `fc-list | grep Terminus` to see its name <3
      unifont
      wqy_microhei
      wqy_zenhei
      noto-fonts-emoji
    ];

    fontconfig.penultimate.enable = false;
    fontconfig.defaultFonts = {
      # IMO WQY Zen Hei plays slightly better with Terminus
      serif     = ["Terminus" "WenQuanYi Zen Hei" "Unifont" "WenQuanYi Micro Hei"];
      sansSerif = ["Terminus" "WenQuanYi Zen Hei" "Unifont" "WenQuanYi Micro Hei"];
      monospace = ["Terminus" "WenQuanYi Zen Hei" "Unifont" "WenQuanYi Micro Hei"];
    };
  };
  #fonts.fonts = with pkgs; [
    #terminus_font 
    #unifont
    # hack-font noto-fonts noto-fonts-cjk noto-fonts-emoji
    # liberation_ttf fira-code fira-code-symbols mplus-outline-fonts
    # dina-font proggyfonts source-code-pro
  #];

  environment.variables = {
    EDITOR = "vim";
    BROWSER = "qutebrowser";
  };

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  #   pinentryFlavor = "gnome3";
  # };

  # List services that you want to enable:

# Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  #   config volume interactively using alsamixer
  sound.enable = true;
  hardware.pulseaudio.enable = true; 
  users.extraUsers.jin.extraGroups = [ "audio" ]; 

  # Enable touchpad support.
  services.xserver.libinput.enable = true;
  services.xserver.libinput.middleEmulation = true;
  services.xserver.libinput.tapping = true;


  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.jin = {
    isNormalUser = true;
    extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "20.03"; # Did you read the comment?

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;
  services.sshd.enable = true; # what's the difference??

  services.xserver = {
    enable = true;
    windowManager.xmonad = {
      enable = true;
      enableContribAndExtras = true;
      extraPackages = haskellPackages: [
        haskellPackages.xmonad-contrib
        haskellPackages.xmonad-extras
        haskellPackages.xmonad
      ];
    };
    desktopManager.xterm.enable = false;
    displayManager.startx.enable = true;
    # capslock => control ==> esc
    xkbOptions = "ctrl:nocaps"; # now capslock means control :)
  };

  home-manager.users.jin = { 
    programs.home-manager.enable = true;

    home.file = {
      ".xinitrc".text = builtins.readFile "${dot}/.xinitrc";
      ".config/alacritty.yml".text = builtins.readFile "${dot}/alacritty.yml";

      ".config/qutebrowser/config.py".text =
        builtins.readFile "${dot}/.config/qutebrowser/config.py";
      ".config/qutebrowser/void.html".text =
        builtins.readFile "${dot}/.config/qutebrowser/void.html";
      ".config/qutebrowser/quickmarks".text =
        builtins.readFile "${dot}/.config/qutebrowser/quickmarks";

      # below we configure ranger..
      ".config/ranger/commands.py".text =
        builtins.readFile "${dot}/.config/ranger/commands.py";
      ".config/ranger/rc.conf".text =
        builtins.readFile "${dot}/.config/ranger/rc.conf";
      ".config/ranger/scope.sh" = {
          text = builtins.readFile "${dot}/.config/ranger/scope.sh";
	  executable = true;
      };
      ".config/ranger/shortcuts_jin.conf".text =
        builtins.readFile "${dot}/.config/ranger/shortcuts_jin.conf";
      ".config/ranger/luke_ranger_readme.md".text =
        builtins.readFile "${dot}/.config/ranger/luke_ranger_readme.md";
      ".config/ranger/rifle.conf".text =
        builtins.readFile "${dot}/.config/ranger/rifle.conf";
      ".config/ranger/shortcuts.conf".text =
        builtins.readFile "${dot}/.config/ranger/shortcuts.conf";
    };

    programs.git = {
      enable = true; 
      userName = "jcguu95";
      userEmail = "jcguu95@gmail.com"; 
    };

    programs.vim = { 
      enable = true;
      extraConfig = builtins.readFile /home/jin/.config/vim/vimrc;
      settings = {
        relativenumber = true;
	number = true;
      };
      plugins = [
        "idris-vim"
	"sensible"
	"vim-airline"
	"The_NERD_tree" # file system explorer
	"fugitive" "vim-gitgutter" #git
      ];
    };

    programs.zsh = {
      enable = true;
      enableAutosuggestions = true;
      enableCompletion = true;
      dotDir = ".config/zsh";
      history.extended = true;
      history.path = ".config/zsh/.zsh_history";
    };
  };
# To use Lenivaya's gorgeous setup, enable the followings:
#
# cf. this issue: https://github.com/Lenivaya/dotfiles/issues/1
# rmk. you might also want to download all configs to ~/.configs for it to work
# properly.
#
#  services.xserver = {
#    windowManager.xmonad = {
#      extraPackages = haskellPackages: [
#        haskellPackages.gloss
#      ];
#      haskellPackages = pkgs.unstable.haskellPackages;
#    };
#
#  nixpkgs.overlays = [
#    (self: super:
#      with super; {
#          unstable = import <unstable> { inherit config; };
#      })
#  ];
#
#################################################################

console.font = "Lat2-Terminus16";

# Default Color (I love it but don't know its color codes.)
console.colors = []; # TODO: Find out its color codes!

# Dark Gruvbox
#console.colors = [ "282828" "cc241d" "98971a" "d79921"
#                   "458588" "b16286" "689d6a" "a89984"
#                   "928374" "fb4934" "b8bb26" "fabd2f"
#                   "83a598" "d3869b" "83c07c" "ebdbb2" ];

# Example colors given in the manpage
#console.colors = [ "002b36" "dc322f" "859900" "b58900"
#                   "268bd2" "d33682" "2aa198" "eee8d5"
#                   "002b36" "cb4b16" "586e75" "657b83"
#                   "839496" "6c71c4" "93a1a1" "fdf6e3" ];

#console.colors = [ "3A3C43" "BE3E48" "869A3A" "C4A535"
#                   "4E76A1" "855B8D" "568EA3" "B8BCB9"
#                   "888987" "FB001E" "0E712E" "C37033"
#                   "176CE3" "FB0067" "2D6F6C" "FCFFB8" ];
#
}
